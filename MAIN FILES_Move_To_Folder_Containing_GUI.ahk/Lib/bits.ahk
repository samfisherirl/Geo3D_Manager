; Generated by Auto-GUI 3.0.1
#NoEnv 
SetBatchLines -1 
install(bits)
{
    global selectgame, gamepath, successbi
    VREx := "VRExport_" bits ".addon"
    Geo3D := "Geo3D"
    
    filesafe := [VREx, "ReShade.ini","Geo3D.addon","dxgi.dll","3DToElse.fx"]
    
    ;check for 64x or 32x
    sleep, 200
    counterx := 1
    ; >>> resolve files in game dir and check for dupes
    for index, value in filesafe
    {
        loop, files, gamepath
        {
            if InStr(A_LoopFileFullPath, value) {
                backup[counterx] := A_LoopFileFullPath
                counterx++
            }
        }
    }
    backupfolder := gamepath "\backup_files_geo_vr"
    FileCreateDir, %backupfolder%
    for index, value in backup
    {
        LoopFileBackup := backup[index]
            FileCopy, %LoopFileBackup%, %backupfolder%, 1
        }
    
    ;Run, %7zbat%, %A_ScriptDir%, min
    
    LocalGeo3D := A_ScriptDir "\geo3d\" bits "-bit"
    bat5 := A_ScriptDir "\3.bat"
    /*
    bat7 := A_ScriptDir "\4.bat"
    bat=
    (
    xcopy "%LocalGeo3D%" "%gamepath%" /E /H /K /O /X /y
    )
    filedelete, %bat5%
    FileAppend, %bat%, %bat7%
    FileMove, %bat7%, %bat5%, 1
    sleep, 100
    try {
        runwait, %comspec% /k %bat%
    } catch {
        MsgBox, Could not obtain admin privileges. The Program will restart.
        Run *RunAs %A_ScriptFullPath% %1%
        goto, leaver2
    }
    */
    for index, value in filesafe
    {
        Geo3DFiles := A_ScriptDir "\geo3d\" bits "-bit\" value
        filecopy, %Geo3DFiles%, %gamepath%, 1
    }
    
    successbi := "1"
    leaver2:
    }
    
    Class Logs
    {
        ReadLog()
        {
            global
            GameExe:=[]
            GameLocation:=[]
            bits:=[]
            countlines:=1
            
            loop, Read, %CSVLog%
            {
                if (A_LoopReadLine != "") {
                    Info := A_LoopReadLine
                    GameInfo := StrSplit(Info, ",")
                    GameLocation[countlines] := GameInfo[2]
                    GameExe[countlines] := GameInfo[3] 
                    countlines++
                }
            }
            For i, v in Gameexe
            {
                line := GameExe[i]
                GameExe[i] := StrReplace(Line, "_", " ")
            }
        }
        
        FindProfile()
        {
            global        
            neutron.qs("#tabler2").innerHTML := ""
            neutron.qs("#tabler2").innerHTML := html 
        }
        
        ReadList()
        {
            global
            html:=""
            sep := "`n"
            GameLocation:=[]
            countlines := 1
            GameExe:=[]
            loop, Read, %LogGames%, log.txt
            {
                if (A_LoopReadLine != "") {
                    Info := A_LoopReadLine
                    GameInfo := StrSplit(Info, ",")
                    GameLocation[countlines] := GameInfo[2]
                    GameExe[countlines] := GameInfo[3]
                    countlines++
                    FileAppend, %A_LoopReadLine%`n
                    }
            }
            FileMove, log.txt, %CSVLog%, 1
        }
        
        UpdateMsg()
        {
            MsgBox, 68, , It appears this is your first time using the app. It is recommended that you download both VR_Screen_Cap and the latest Geo3D. Select an option.
            IfMsgBox Yes, {
                global msg := 1
            return msg
        }
    }
    
}
/*

*/

class LogCustom 
{
    read() {
        global LogGames, CSVLog, html, neutron, GameExe, Gamelocation
        if !FileExist(LogGames)
        {
            texter=
            (
            ,D:\SampleGame\Battlefield 1\bf1.exe,bf1.exe,bf1,
            )
            FileAppend, %texter%, %LogGames%
            goto, Leaver3
        }
        html:=""
        sep := "`n"
        GameLocation:=[]
        countlines := 1
        GameExe:=[]
        loop, Read, %LogGames%, log.txt
        {
            if (A_LoopReadLine != "") {
                Info := A_LoopReadLine
                GameInfo := StrSplit(Info, ",")
                GameLocation[countlines] := GameInfo[2]
                GameExe[countlines] := GameInfo[3]
                countlines++
                FileAppend, %A_LoopReadLine%`n
                }
        }
        FileMove, log.txt, %LogGames%, 1
        ; ADD HTML TO GAME LIST
        /*
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            placeholder := []
            placeholder := StrSplit(GL, "\")
            GL := placeholder[1] "\" placeholder[2] "\" placeholder[3]
            GE := GameExe[A_Index]
            if (GE != "" or GL != "")
            {
                html=
                (
                %html%
                <tr>
                <td align="center">
                <a class="btn btn-danger" onclick="ahk.Uninstall(event)" id="%GE%" name="%GE%"><em class="fa fa-trash"></em></a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>"
            }
        }
        */
        Lib.writehtml(countlines, GameLocation, GameExe)
        neutron.qs("#tabler").innerHTML := ""
        neutron.qs("#tabler").innerHTML := html
    Leaver3:
    }
    find() {
        Global
        For i, v in GameExe
        {
            Msgbox %v%
        }
    }
}
/*

*/
AddtoLog(File,bits)
{
    global LogGames, selectgame, gamepath, gameexe
    FileAppend,
    (
    ,%selectgame%, %gameexe%, %gamepath%, %bits%,
    ), %File%
    
}

Class UIN
{
    
    
    Removefromlog(GE)
    {
        global LogGames, selectgame, gamepath, GL
        log := A_ScriptDir "\out.txt"
        founder:=0
        loop, Read, %LogGames%, %log%
        {
            line := ""
            if InStr(A_LoopReadLine, GE) {
                line:=""
            } else {
                line=
                (
                %A_LoopReadLine%
                    
                )
            }
            FileAppend, %line%, %log%
        }
        FileMove, %log%, %LogGames%, 1
        
    }
}

Removefromlog(GE)
{
    global LogGames, selectgame, gamepath, GL
    ;7z x archive.zip 
    log := A_ScriptDir "\out.txt"
    founder:=0
    loop, Read, %LogGames%, %log%
    {
        line := ""
        if InStr(A_LoopReadLine, GE) {
            line:=""
        } else {
            line=
            (
            %A_LoopReadLine%
                
            )
        }
        FileAppend, %line%, %log%
    }
    FileMove, %log%, %LogGames%, 1
    
}

CleanLog()
{
    global LogGames
    loop, Read, %LogGames%
    {
        if (A_LoopReadLine="") {
            continue
        } else {
            FileLooper .= A_LoopReadLine "`n"
            }
    }
}

Class PS
{
    
    MsgboxStart()
    {
        global CSVer
        global Title := "Importing Steam Library...",
        global Sec := 5
        MsgBox, 64, %Title%, Importing Steam Library in... %Sec% seconds, %Sec%
        
    }
    
    Countdown()
    {
        global Title, Sec
        if (Sec<=1) {
            Exitapp
        }
        ControlSetText, Static2, % "Importing Steam Library in... " (Sec:=Sec-1) " seconds", %Title% ahk_class #32770
    }
}

class Lib
{
    bitchecker()
    {
        global selectgame
        bat := A_ScriptDir "\1.bat"
        txt := A_ScriptDir "\1.txt"
        sigcheck := A_ScriptDir "\sigcheck64.exe"
        logger := A_ScriptDir "\output.txt"
        Field:=[]
        FileDelete, %bat%
        FileDelete, %logger%
        T := `""""
        ;check for 64x or 32x
        writetobat := T . sigcheck . T . " -a -c " . T . Selectgame . T . " > " . T . logger . T
        ;DllCall("AllocConsole")  ; Give me a console window.
        sleep, 100
        ;Run, %writetobat%
        ;Run, "timeout /t 10"
        FileAppend, %writetobat%, %txt%
        sleep, 100
        filemove, %txt%, %bat%, 1
        sleep, 100
        Run *Runas %bat%
        sleep, 100
    }

    delete() {
        global Dir
        filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "Geo3D.addon", "dxgi.dll", "3DToElse.fx"] 
        for index, value in filesafe 
        {
            FileMove, %GL%\%value%, %Dir%, 1
        }
    }
    
    class 7za
    {
        move7za(dir)
        {
            filecopy, %A_ScriptDir%\geo3d\7za.exe, %A_ScriptDir%%dir%\7za.exe, 1
        }
        batwrite(file,dir)
        {
            global 7z := "7za.exe"
            filecopy, %A_ScriptDir%\lib\7za.exe, %A_ScriptDir%%dir%, 1
            filedelete, %A_Scriptdir%\lib\b.txt
            filedelete, %A_Scriptdir%%dir%\b.bat
            fileappend, 
            (
            %7z% x %file% -y 
            
            ), %A_Scriptdir%\lib\b.txt
            
            filemove, %A_Scriptdir%\lib\b.txt, %A_Scriptdir%%dir%\b.bat, 1
            run, b.bat, %A_Scriptdir%%dir%
            ;file := A_ScriptDir "\profiles.7z"
            ;7z x archive.zip 
            
        }
    }
    
    PushBits()
    {
        global bit
        loop, read, %logger%
        {
            if (A_Index = "2") {
                Col := A_LoopReadLine
                Field := StrSplit(Col, ",")
                for index, value in Field
                {
                    if InStr(value, "bit") {
                        bit := value
                        break
                    }
                }
                Delim := `""""
                bit := StrReplace(bit, Delim)
                ; NewStr := StrReplace(Str, """")
                
                ; bit := Trim(bit) """
                if InStr(bit, "32") {
                    bits := "32"
                    install(bits)
                }else if InStr(bit, "64") {
                    bits := "64"
                    install(bits)
                } else {
                    msgbox, unknown game version
                    bits := "64"
                    install(bits)
                }
            }
        }
    }
    
    class selector
    {
        file()
        {
            global
            ;declare to be used elsewhere
            selectgame := ""
            FileSelectFile, Selectgame, 1, , Select a game, Application (*.exe)
            ;browse for file
            Lib.Selector.VerifyNSplit(Selectgame)
            }
        
        /*
        file or folder
        
        */
        
        folder()
        {
            global
            FileSelectFolder, Selectgame,,,Select %Gametoinstall%'s Folder
        }
        
        VerifyNSplit(Selectgame) {
            global
            SplitPath, Selectgame, Gameexe, Gamepath, Gameextenstion, Gamenameonly
        }
        
        CopyFilesAndFolders(Source,Select)
        {
            /*
            
            search "leftoff"
            
            
            
            */
            ;FileCopy, %Source%, %Select%, %OVR% 
            ;msgbox %Source%, %Select%, %OVR% 
            files := 0
            Loop, Files, %Source%\*.*, F  ; 2 means "retrieve folders only".
            {
                files:=1

                /*
                if !InStr(A_LoopFileName, "ini") OR !InStr(A_LoopFileName, "dll")
                {
                    folder:=1
                }
                */
            }
            msgbox %files%
            if (files=1)
                FileCopy, %Source%\*.*, %Select%\*.*, 1
            else 
            {
                Loop, Files, %Source%\*.*, D
                { 
                    Thing := A_LoopFileLongPath
                    break
                }  
                FileCopyDir, %Thing%, %Select%, 1
            }             
            
        }
        getline(GID) {
            global CSVLog, selectgame, gameid, GF
            filedelete, log.txt
            j:=","
            Loop, read, %CSVLog%, Log.txt
            { 
                var := []
                var := StrSplit(A_LoopReadLine, ",")
                ID:=var[1]
                GameFolder:=var[2]
                if instr(GID,ID) {
                    linenumber:=ID   
                    GF := gamefolder
                    FileAppend, %A_LoopReadLine%`n
                        ;Line := var[1] . j . selectgame . j . var[3] . j . var[4] . j . var[5] . j . var[6] . j
                    ;FileAppend, %Line%`n
                }
                else
                    FileAppend, %A_LoopReadLine%`n
                }
            FileMove, Log.txt, %CSVLog%, 1
            return, linenumber
        }

        FandFloop(GF)
        {
            Loop, Files, %GF%\*.ini, FR
            {
                if InStr(A_LoopFilePath, "reshade")
                    location := A_LoopFileDir
            }
            return, location
        }

        Register() {
            global filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "dxcompiler.dll", "dxil.dll", "Geo3D.addon", "dxgi.dll", "3DToElse.fx"] 
            return, filesafe
        }

        Uninstaller(filesafe, location)
        {
            global dir
            for i, v in filesafe
            {
            FileMove, %location%\%v%, %dir%\trash.lib,1 
        }
    }
        
        addorremove(linenumber) {
            
            global CSVLog, selectgame, gameid
            j := ","
            Loop, read, %CSVLog%, Log.txt
            {
              var := []
              var := StrSplit(A_LoopReadLine, ",")
              ID:=var[1]
                if instr(ID, linenumber) {
                    Line := var[1] . j . selectgame . j . var[3] . j . var[4] . j . var[5] . j . var[6] . j
                    FileAppend, %Line%`n
                }
                else
                    FileAppend, %A_LoopReadLine%`n
                }
            
            FileMove, Log.txt, %CSVLog%, 1
        }
        
    }
    
    addonfiles(bits)
    {
        ; bits + if (VRx = 1) then {both x64 & x32}
        ; bits + if (VRx = 0) then {only %bits%}
        if (bits="") {
            VRex:="VRExport_32.addon"
            VRex2:="VRExport_64.addon"
        } else {
            VREx := "VRExport_" bits ".addon"
            VREx2 := ""
        }
        
        global filesafe := [VREx, VRex2, "ReShade.ini","Geo3D.addon","dxgi.dll","3DToElse.fx"]
    }
    
    cleanlogs(GE)
    {
        global LogGames
        log := A_ScriptDir "\out.txt"
        founder:=0
        loop, Read, %LogGames%, %log%
        {
            line := ""
            if InStr(A_LoopReadLine, GE) {
                line:=""
            } else {
                line=
                (
                %A_LoopReadLine%
                    
                )
            }
            FileAppend, %line%, %log%
        }
        FileMove, %log%, %LogGames%, 1
    }
    
    /*
    lib.writehtml() takes game list and writes html
    */
    
    writehtml(countlines, GameLocation, GameExe)
    {
        global html
        html := ""
        sep := "`n"
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            /*
            placeholder := []
            ; placeholder := StrSplit(GL, "\")
            GL := placeholder[1] ;"\" placeholder[2] "\" placeholder[3]
            */
            GE := GameExe[A_Index]
            if (GE != "" or GL != "") {
                if InStr(GL, "Not") {
                    color:="success"
                    icon:="fa fa-windows"
                    action := "Featured"
                    tooltip := " &nbsp;  Install"
                } else {
                    color := "outline-danger"
                    icon := "fa fa-trash"
                    action := "Uninstall1"
                    tooltip := "Remove"
                }
                html= 
                (
                %html%
                <tr>
                <td align="center">
                <a class="btn btn-%color%" onclick="ahk.%action%(event)" id="%A_Index%" name="%GE%"><em class="%icon%"></em> %tooltip%</a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>"
            }
        }
    }
    
    
    customhtml(countlines, GameLocation, GameExe) 
    {
        global html:=""
        sep := "`n"
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            placeholder := []
            placeholder := StrSplit(GL, "\")
            GL := placeholder[1] "\" placeholder[2] "\" placeholder[3]
            GE := GameExe[A_Index] 
            if (GE != "" or GL != "")
            {
                html=
                (
                %html%
                <tr>
                <td align="center"> 
                <a class="btn btn-success" onclick="ahk.Uninstall(event)" id="%GE%" name="%GE%"><em class="fa fa-gamepad"></em></a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>" 
            }
        }    
    }
    
}
