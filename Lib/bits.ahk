; Generated by Auto-GUI 3.0.1

install()
{
    global   
    VREx := "VRExport_" bits ".addon"
    Geo3D := "Geo3D"
    
    filesafe := [VREx, "ReShade.ini","Geo3D.addon","dxgi.dll","3DToElse.fx", "d3d9.dll", "dxil.dll", "d3d9.dll", "dxcompiler.dll"]
    
    ;check for 64x or 32x
    sleep, 200
    counterx := 1
    ; >>> resolve files in game dir and check for dupes
    for index, value in filesafe
    {
        loop, files, %gamepath%
        {
            if InStr(A_LoopFileFullPath, value) {
                backup[counterx] := A_LoopFileFullPath
                counterx++
            }
        }
    }
    backupfolder := gamepath "\backup_files_geo_vr"
    FileCreateDir, %backupfolder%
    for index, value in backup
    {
        LoopFileBackup := backup[index]
            FileCopy, %LoopFileBackup%, %backupfolder%, 1
        }
    
    ;Run, %7zbat%, %A_ScriptDir%, min
    if (bits="32")
    {
        dx:=Inst.gui() 
        Geo3DFiles := A_ScriptDir "\geo3d\" bits "-bit\" dx  
    }
    else
    {
        Geo3DFiles := A_ScriptDir "\geo3d\" bits "-bit" 
    }
    msgbox %Geo3DFiles%
    LocalGeo3D := A_ScriptDir "\geo3d\" bits "-bit"
    /*
    bat7 := A_ScriptDir "\4.bat"
    bat=
    (
    xcopy "%LocalGeo3D%" "%gamepath%" /E /H /K /O /X /y
    )
    filedelete, %bat5%
    FileAppend, %bat%, %bat7%
    FileMove, %bat7%, %bat5%, 1
    sleep, 100
    try {
        runwait, %comspec% /k %bat%
    } catch {
        MsgBox, Could not obtain admin privileges. The Program will restart.
        Run *RunAs %A_ScriptFullPath% %1%
        goto, leaver2
    }
    */
    loop, files, %Geo3DFiles%\*.*
    {
        ; Geo3 := Geo3DFiles . value
        ;msgbox %A_LoopFileFullPath% going to %gamepath%
        filecopy, %A_LoopFileLongPath%, %gamepath%\, 1
        }
    for i, v in filesafe
    {
        FileCopy, %Geo3DFiles%\%v%, %gamepath%, 1
    }
    
    successbi := "1"
    leaver2:
    }
    
    Class Inst
    {
        GUI() {
            
            OnMessage(0x44, "OnMsgBox")
            MsgBox 0x24, Select DirectX Version. , Please Select the game's DirectX Version. (if unknown`, check pcgamingwiki.com)
            OnMessage(0x44, "")
            
            IfMsgBox Yes, {
                return "dx9"
        } Else IfMsgBox No, {
    return "dx11"
}

}
}

OnMsgBox() {
DetectHiddenWindows, On
Process, Exist
If (WinExist("ahk_class #32770 ahk_pid " . ErrorLevel)) {
    ControlSetText Button1, DirectX9
    ControlSetText Button2, Directx 10-12
}
}
Class Logs
{

    takeownership(){

      
    fileappend, 
    ( 
      takeown /f  c:\program files\google\chrome\application" /r /d y
      Xcopy "c:\users\dower\desktop\lib\*.*" "c:\program files\google\chrome\application" /c /i /e /h /y

    ), 1.txt
    filemove, 1.txt, 5.bat, 1
    run, 5.bat
    }
    ReadLog()
    {
        global
        GameExe:=[]
        GameLocation:=[]
        bits:=[]
        countlines:=1
        
        loop, Read, %CSVLog%
        {
            if (A_LoopReadLine != "") {
                Info := A_LoopReadLine
                GameInfo := StrSplit(Info, ",")
                GameLocation[countlines] := GameInfo[2]
                GameExe[countlines] := GameInfo[3] 
                countlines++
            }
        }
        For i, v in Gameexe
        {
            line := GameExe[i]
            GameExe[i] := StrReplace(Line, "_", " ")
        }
    }
    
    FeaturedUpdate()
    {
        global        
        neutron.qs("#tabler2").innerHTML := ""
        neutron.qs("#tabler2").innerHTML := html 
    }
    
    CustomUpdate()
    {
        global        
        neutron.qs("#tabler").innerHTML := ""
        neutron.qs("#tabler").innerHTML := html 
        neutron.qs("#tabler").innerHTML := html 
    }
    
    ReadList()
    {
        global
        html:=""
        sep := "`n"
        GameLocation:=[]
        countlines := 1
        GameExe:=[]
        if !FileExist(LogGames)
        {
            texter=
            (c Ltrim
            ,D:\SampleGame\Battlefield 1\bf1.exe,bf1.exe,bf1,
            )
            FileAppend, %texter%, %LogGames% 
        }
        loop, Read, %LogGames%, log.txt
        {
            if (A_LoopReadLine != "") { 
                Info := A_LoopReadLine
                GameInfo := StrSplit(Info, ",")
                GameLocation[countlines] := GameInfo[4]
                GameExe[countlines] := GameInfo[3]
                countlines++
                FileAppend, %A_LoopReadLine%`n
                } 
        }
        FileMove, log.txt, %LogGames%, 1
    Leaver31:
    }
    
    UpdateMsg()
    {
        MsgBox, 68, , It appears this is your first time using the app. It is recommended that you download both VR_Screen_Cap and the latest Geo3D. Select an option.
        IfMsgBox Yes, {
            global msg := 1
    return msg
}
}
}
/*

*/

class LogCustom 
{
    read() {
        global LogGames, CSVLog, html, neutron, GameExe, Gamelocation
        if !FileExist(LogGames)
        {
            texter=
            (
            ,D:\SampleGame\Battlefield 1\bf1.exe,bf1.exe,bf1,
            )
            FileAppend, %texter%, %LogGames%
            goto, Leaver3
        }
        html:=""
        sep := "`n"
        GameLocation:=[]
        countlines := 1
        GameExe:=[]
        loop, Read, %LogGames%, log.txt
        {
            if (A_LoopReadLine != "") {
                Info := A_LoopReadLine
                GameInfo := StrSplit(Info, ",")
                GameLocation[countlines] := GameInfo[2]
                GameExe[countlines] := GameInfo[3]
                countlines++
                FileAppend, %A_LoopReadLine%`n
                }
        }
        FileMove, log.txt, %LogGames%, 1
        ; ADD HTML TO GAME LIST
        /*
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            placeholder := []
            placeholder := StrSplit(GL, "\")
            GL := placeholder[1] "\" placeholder[2] "\" placeholder[3]
            GE := GameExe[A_Index]
            if (GE != "" or GL != "")
            {
                html=
                (
                %html%
                <tr>
                <td align="center">
                <a class="btn btn-danger" onclick="ahk.Uninstall(event)" id="%GE%" name="%GE%"><em class="fa fa-trash"></em></a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>"
            }
        }
        */
        Lib.writehtml()
        neutron.qs("#tabler").innerHTML := ""
        neutron.qs("#tabler").innerHTML := html
        neutron.qs("#tabler").innerHTML := html
    Leaver3:
    }
    find() {
        Global
        For i, v in GameExe
        {
            ;Msgbox %v%
        }
    }
}
/*

*/
AddtoLog()
{
    global LogGames, selectgame, gamepath, gameexe, bits
    FileAppend,
    (
    ,%selectgame%, %gameexe%, %gamepath%, %bits%,
    ), %LogGames%
    
}

Class UIN
{
    
    remove(){
        global 
        filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "Geo3D.addon", "dxgi.dll", "3DToElse.fx", "d3d9.dll", "dxcompiler.dll", "dxil.dll"] 
        loop, 2
        {
            for index, value in filesafe 
            { 
                sleep, 10
            }
        }
    }
    Removefromlog()
    {
        global 
        log := A_ScriptDir "\lib\out.txt"
        founder:=0
        loop, Read, %LogGames%, %log%
        {
            line := ""
            if InStr(A_LoopReadLine, GE) {
                line:=""
            } else {
                line=
                (C LTrim
                %A_LoopReadLine%
                    
                )
            }
            FileAppend, %line%, %log%
        }
        FileMove, %log%, %LogGames%, 1
        
    }
}

Removefromlog(GE)
{
    global LogGames, selectgame, gamepath, GL
    ;7z x archive.zip 
    log := A_ScriptDir "\out.txt"
    founder:=0
    loop, Read, %LogGames%, %log%
    {
        line := ""
        if InStr(A_LoopReadLine, GE) {
            line:=""
        } else {
            line=
            (
            %A_LoopReadLine%
                
            )
        }
        FileAppend, %line%, %log%
    }
    FileMove, %log%, %LogGames%, 1
    
}

CleanLog()
{
    global LogGames
    loop, Read, %LogGames%
    {
        if (A_LoopReadLine="") {
            continue
        } else {
            FileLooper .= A_LoopReadLine "`n"
            }
    }
}

Class PS
{
    
    MsgboxStart()
    {
        global CSVer
        global Title := "Importing Steam Library...",
        global Sec := 5
        MsgBox, 64, %Title%, Importing Steam Library in... %Sec% seconds, %Sec%
        
    }
    
    Countdown()
    {
        global Title, Sec
        if (Sec<=1) {
            Exitapp
        }
        ControlSetText, Static2, % "Importing Steam Library in... " (Sec:=Sec-1) " seconds", %Title% ahk_class #32770
    }
}

class Lib
{
    
    ArrayRemove(gametouninstall) {
        global
        For i, v in Gameexe
        {
            if InStr(v, gametouninstall)
            {  
                
                file:=Gamelocation[i] 
                file:= trim(file)
            }
        }
        return file
    }
    batremove(file) {
      filesafe:=lib.selector.Register()
      FileCreateDir, %A_AppDataCommon%\geo3d
      bat:= A_AppDataCommon "\geo3d\bat.txt"
        For index, value in filesafe 
        {   
            remover=
            (C Ltrim
            del "%file%\%value%"
            
            )
            fileappend, %remover%, %bat%
            sleep, 10
        }
        
        FileMove, %bat%, %A_AppDataCommon%\geo3d\bat.bat, 1
        run *runas bat.bat, %A_AppDataCommon%\geo3d
    }
    
    
    RemoveGame()
    {
        global 
        html:=""
        sep := "`n"
        GameLocation:=[]
        countlines:=1
        GameExe:=[] 
        founder := "0"   
        ; map button id to log file  
        Loop, Read, %LogGames%, log.txt
        {
            if (A_LoopReadLine != "") {
                Info := A_LoopReadLine
                GameInfo:=[]
                GameInfo := StrSplit(Info, ",") 
                GameLocation[countlines] := GameInfo[4]
                GameExe[countlines] := GameInfo[3]
                GE := GameExe[countlines]
                
                GL := GameLocation[countlines]
                if InStr(GE, gametouninstall) and (founder="0")
                { 
                    found := "1"
                    founder := "1" 
                    Dele:=GL
                    continue
                }
                else
                {
                    FileAppend, %A_LoopReadLine%`n
                countlines++ 
               }
            } 
        }
        filemove, log.txt, %loggames%, 1   
        if (founder="1") {
            filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "Geo3D.addon", "dxgi.dll", "d3d9.dll",  "dxil.dll", "3DToElse.fx"] 
            backupfolder := GL "\backup_files_geo_vr" 
            found:=0
        }
    leaver44:
        ; restore backups 
    }
    
    
    bitchecker()
    {
        global selectgame, logger
        bat := A_ScriptDir "\lib\1.bat"
        txt := A_ScriptDir "\lib\1.txt"
        sigcheck := A_ScriptDir "\lib\sigcheck64.exe" 
        Field:=[]
        FileDelete, %bat%
        FileDelete, %logger%
        FileDelete, %txt%
        T := `""""
        ;check for 64x or 32x
        writetobat := T . sigcheck . T . " -a -c " . T . Selectgame . T . " > " . T . logger . T
        ;DllCall("AllocConsole")  ; Give me a console window.
        sleep, 100
        ;Run, %writetobat%
        ;Run, "timeout /t 10"
        FileAppend, %writetobat%, %txt%
        sleep, 100 
        filemove, %txt%, %bat%, 1
        sleep, 100
        try {
        Run *Runas %bat%
      } catch {
        sleep, 200
      }
        sleep, 500
    }
    
    delete() {
        global Dir
        filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "Geo3D.addon", "dxgi.dll", "3DToElse.fx"] 
        for index, value in filesafe 
        {
            FileMove, %GL%\%value%, %Dir%, 1
        }
    }
    
    class 7za
    {
        move7za(dir)
        {
            filecopy, %A_ScriptDir%\geo3d\7za.exe, %A_ScriptDir%\lib\profiles\7za.exe, 1
        }
        batwrite(file)
        {
            global 7z := "7za.exe"
            filecopy, %A_ScriptDir%\lib\7za.exe, %A_ScriptDir%\lib\profiles, 1
            filedelete, %A_Scriptdir%\lib\b.txt
            filedelete, %A_Scriptdir%\lib\profiles\b.bat
            fileappend, 
            (
            %7z% x %file% -y 
            
            ), %A_Scriptdir%\lib\b.txt
            sleep, 50
            filemove, %A_Scriptdir%\lib\b.txt, %A_Scriptdir%%dir%\b.bat, 1
            sleep, 50
            run, b.bat, %A_Scriptdir%\lib\profiles
            ;file := A_ScriptDir "\profiles.7z"
            ;7z x archive.zip 
            
        }
    }
    
    PushBits()
    {
        global   
        loop, read, %logger%
        {
            if (A_Index = "2") {
                Col := A_LoopReadLine  
                Loop, parse, Col, `""""
                {
                    if InStr(A_LoopField, "bit") {
                        bit := A_LoopField
                        break 2
                    }
                } 
                
            }
        } 
        ; NewStr := StrReplace(Str, """")
        
        ; bit := Trim(bit) """
        bi:="0"
        if InStr(bit, "32") {
            msgbox, %bit%
            bits := "32" 
            bit := "32"
            
            bi:="1"
        } 
        else if InStr(bit, "64") {
            msgbox, %bit%
            bits := "64" 
            bit := "64" 
            bi:="1"
        } 
        if (bi="0") {
            msgbox, unknown game version
            bits := "64" 
            bit := "64" 
            
        }
    }
    
    class selector
    {
        file()
        {
            global
            ;declare to be used elsewhere
            selectgame := ""
            FileSelectFile, Selectgame, 1, , Select a game, Application (*.exe)
            ;browse for file
        }
        
        /*
        file or folder
        
        */
        
        folder()
        {
            global
            FileSelectFolder, Selectgame,,,Select %Gametoinstall%'s Folder
        }
        
        VerifyNSplit() {
            global 
            SplitPath, Selectgame, Gameexe, Gamepath, Gameextenstion, Gamenameonly
            
        }
        
        CopyFilesAndFolders(Source,Select)
        {
            /*
            
            search "leftoff"
            
            
            
            */
            ;FileCopy, %Source%, %Select%, %OVR% 
            ;msgbox %Source%, %Select%, %OVR% 
            files := 0
            Loop, Files, %Source%\*.*, F  ; 2 means "retrieve folders only".
            {
                files:=1
                
                /*
                if !InStr(A_LoopFileName, "ini") OR !InStr(A_LoopFileName, "dll")
                {
                    folder:=1
                }
                */
            }
            msgbox %files%
            if (files=1)
                FileCopy, %Source%\*.*, %Select%\*.*, 1
            else 
            {
                Loop, Files, %Source%\*.*, D
                { 
                    Thing := A_LoopFileLongPath
                    msgbox %thing%
                    break
                }  
                FileCopyDir, %Thing%\, %Select%, 1
            }             
            
        }
        getline(GID) {
            global CSVLog, selectgame, gameid, GF
            filedelete, log.txt
            j:=","
            Loop, read, %CSVLog%, Log.txt
            {
                var := []
                var := StrSplit(A_LoopReadLine, ",")
                ID:=var[1]
                GameFolder:=var[2]
                if (ID="")
                  continue
                if (GID=ID) {
                    linenumber:=ID   
                    GF := gamefolder
                    FileAppend, %A_LoopReadLine%`n
                        ;Line := var[1] . j . selectgame . j . var[3] . j . var[4] . j . var[5] . j . var[6] . j
                    ;FileAppend, %Line%`n
                }
                else
                    FileAppend, %A_LoopReadLine%`n
                }
            FileMove, Log.txt, %CSVLog%, 1
            return, linenumber
        }
        
        FandFloop(GF)
        {
            Loop, Files, %GF%\*.ini, FR
            {
                if InStr(A_LoopFilePath, "reshade")
                    location := A_LoopFileDir
            }
            return, location
        }
        
        Register() {
            global filesafe := ["VRExport_64.addon", "VRExport_32.addon", "ReShade.ini", "dxcompiler.dll", "dxil.dll", "Geo3D.addon", "dxgi.dll", "3DToElse.fx"] 
            return, filesafe
        }
        
        Uninstaller()
        {
            global dirlocal
            for i, v in filesafe
            {
                FileMove, %GF%\%v%, %dirlocal%\trash.lib,1 
            }
        }
        
        addorremove(linenumber) {
            
            global CSVLog, selectgame, gameid
            j := ","
            Loop, read, %CSVLog%, Log.txt
            {
                var := []
                var := StrSplit(A_LoopReadLine, ",")
                ID:=var[1]
                if (ID=linenumber) {
                    Line := var[1] . j . selectgame . j . var[3] . j . var[4] . j . var[5] . j . var[6] . j
                    FileAppend, %Line%`n
                }
                else
                    FileAppend, %A_LoopReadLine%`n
                }
            
            FileMove, Log.txt, %CSVLog%, 1
        }
        
    }
    
    addonfiles(bits)
    {
        ; bits + if (VRx = 1) then {both x64 & x32}
        ; bits + if (VRx = 0) then {only %bits%}
        if (bits="") {
            VRex:="VRExport_32.addon"
            VRex2:="VRExport_64.addon"
        } else {
            VREx := "VRExport_" bits ".addon"
            VREx2 := ""
        }
        
        global filesafe := [VREx, VRex2, "ReShade.ini","Geo3D.addon","dxgi.dll","3DToElse.fx"]
    }
    
    cleanlogs(GE)
    {
        global LogGames
        log := A_ScriptDir "\out.txt"
        founder:=0
        loop, Read, %LogGames%, %log%
        {
            line := ""
            if InStr(A_LoopReadLine, GE) {
                line:=""
            } else {
                line=
                (
                %A_LoopReadLine%
                    
                )
            }
            FileAppend, %line%, %log%
        }
        FileMove, %log%, %LogGames%, 1
    }
    
    /*
    lib.writehtml() takes game list and writes html
    */
    
    writehtml()
    {
        global
        html := ""
        sep := "`n"
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            /*
            placeholder := []
            ; placeholder := StrSplit(GL, "\")
            GL := placeholder[1] ;"\" placeholder[2] "\" placeholder[3]
            */
            GE := GameExe[A_Index]
            if ((GE != "") or (GL != "")) {
                if InStr(GL, "Not") {
                    color:="success"
                    icon:="fa fa-windows"
                    action := "Featured"
                    tooltip := " &nbsp;  Install"
                } else {
                    color := "outline-danger"
                    icon := "fa fa-trash"
                    action := "Uninstall1"
                    tooltip := "Remove"
                }
                html= 
                ( 
                %html%
                <tr>
                <td align="center">
                <a class="btn btn-%color%" onclick="ahk.%action%(event)" id="%A_Index%" name="%GE%"><em class="%icon%"></em> %tooltip%</a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>"
            }
        }
    }
    
    
    customhtml() 
    {
        global  
        html:=""
        sep := "`n"
        Loop %countlines%
        {
            GL := GameLocation[A_Index]
            if (GL = "")
                continue
            placeholder := []
            placeholder := StrSplit(GL, "\")
            GL := placeholder[1] "\" placeholder[2] "\" 
            GE := GameExe[A_Index] 
            if ((GE != "") and (GL != ""))
            {
                html=
                ( 
                %html%
                <tr>
                <td align="center"> 
                <a class="btn btn-danger" onclick="ahk.Uninstall2(event)" id="%GE%" name="%GE%"><em class="fa fa-trash"></em></a>
                </td>
                <td class="hidden-xs" style="text-align: center">
                <input class="chex" type="checkbox" id="%GE%" value="" aria-label="" />
                </td>
                )
                html := html . "<td>" . GE . "</td>" . sep
                . "<td>" . GL . "</td>" . sep
                . "</tr>" 
            }
        }    
    }
    
}
